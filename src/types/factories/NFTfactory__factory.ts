/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTfactory, NFTfactoryInterface } from "../NFTfactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_fromTokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_toTokenId",
        type: "uint256",
      },
    ],
    name: "BatchMetadataUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "MetadataUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801562000010575f80fd5b50336040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b815250815f90816200005e9190620001a1565b5060016200006d8282620001a1565b5050506001600160a01b0381166200009e57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b620000a981620000b0565b5062000269565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200012a57607f821691505b6020821081036200014957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200019c575f81815260208120601f850160051c81016020861015620001775750805b601f850160051c820191505b81811015620001985782815560010162000183565b5050505b505050565b81516001600160401b03811115620001bd57620001bd62000101565b620001d581620001ce845462000115565b846200014f565b602080601f8311600181146200020b575f8415620001f35750858301515b5f19600386901b1c1916600185901b17855562000198565b5f85815260208120601f198616915b828110156200023b578886015182559484019460019091019084016200021a565b50858210156200025957878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b61142380620002775f395ff3fe608060405234801561000f575f80fd5b5060043610610115575f3560e01c8063715018a6116100ad578063b88d4fde1161007d578063d204c45e11610063578063d204c45e1461024a578063e985e9c51461025d578063f2fde38b14610298575f80fd5b8063b88d4fde14610224578063c87b56dd14610237575f80fd5b8063715018a6146101f05780638da5cb5b146101f857806395d89b4114610209578063a22cb46514610211575f80fd5b806323b872dd116100e857806323b872dd1461019657806342842e0e146101a95780636352211e146101bc57806370a08231146101cf575f80fd5b806301ffc9a71461011957806306fdde0314610141578063081812fc14610156578063095ea7b314610181575b5f80fd5b61012c610127366004610f41565b6102ab565b60405190151581526020015b60405180910390f35b6101496102bb565b6040516101389190610fa9565b610169610164366004610fbb565b61034a565b6040516001600160a01b039091168152602001610138565b61019461018f366004610fed565b610371565b005b6101946101a4366004611015565b610380565b6101946101b7366004611015565b61040e565b6101696101ca366004610fbb565b61042d565b6101e26101dd36600461104e565b610437565b604051908152602001610138565b61019461047c565b6007546001600160a01b0316610169565b61014961048f565b61019461021f366004611067565b61049e565b610194610232366004611127565b6104a9565b610149610245366004610fbb565b6104c0565b61019461025836600461119e565b6104cb565b61012c61026b3660046111fc565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b6101946102a636600461104e565b6104fd565b5f6102b58261053a565b92915050565b60605f80546102c99061122d565b80601f01602080910402602001604051908101604052809291908181526020018280546102f59061122d565b80156103405780601f1061031757610100808354040283529160200191610340565b820191905f5260205f20905b81548152906001019060200180831161032357829003601f168201915b5050505050905090565b5f6103548261055e565b505f828152600460205260409020546001600160a01b03166102b5565b61037c828233610596565b5050565b6001600160a01b0382166103ae57604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6103ba8383336105a3565b9050836001600160a01b0316816001600160a01b031614610408576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016103a5565b50505050565b61042883838360405180602001604052805f8152506104a9565b505050565b5f6102b58261055e565b5f6001600160a01b038216610461576040516322718ad960e21b81525f60048201526024016103a5565b506001600160a01b03165f9081526003602052604090205490565b6104846106a2565b61048d5f6106cf565b565b6060600180546102c99061122d565b61037c33838361072d565b6104b4848484610380565b610408848484846107cb565b60606102b5826108f1565b6104d36106a2565b600880545f91826104e383611265565b9190505590506104f383826109fc565b6104288183610a15565b6105056106a2565b6001600160a01b03811661052e57604051631e4fbdf760e01b81525f60048201526024016103a5565b610537816106cf565b50565b5f6001600160e01b03198216632483248360e11b14806102b557506102b582610a64565b5f818152600260205260408120546001600160a01b0316806102b557604051637e27328960e01b8152600481018490526024016103a5565b6104288383836001610ab3565b5f828152600260205260408120546001600160a01b03908116908316156105cf576105cf818486610be2565b6001600160a01b03811615610609576105ea5f855f80610ab3565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b03851615610637576001600160a01b0385165f908152600360205260409020805460010190555b5f84815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6007546001600160a01b0316331461048d5760405163118cdaa760e01b81523360048201526024016103a5565b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03821661075f57604051630b61174360e31b81526001600160a01b03831660048201526024016103a5565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561040857604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061080d903390889087908790600401611289565b6020604051808303815f875af1925050508015610847575060408051601f3d908101601f19168201909252610844918101906112c4565b60015b6108ae573d808015610874576040519150601f19603f3d011682016040523d82523d5f602084013e610879565b606091505b5080515f036108a657604051633250574960e11b81526001600160a01b03851660048201526024016103a5565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146108ea57604051633250574960e11b81526001600160a01b03851660048201526024016103a5565b5050505050565b60606108fc8261055e565b505f82815260066020526040812080546109159061122d565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061122d565b801561098c5780601f106109635761010080835404028352916020019161098c565b820191905f5260205f20905b81548152906001019060200180831161096f57829003601f168201915b505050505090505f6109a860408051602081019091525f815290565b905080515f036109b9575092915050565b8151156109eb5780826040516020016109d39291906112df565b60405160208183030381529060405292505050919050565b6109f484610c46565b949350505050565b61037c828260405180602001604052805f815250610cb7565b5f828152600660205260409020610a2c828261135a565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b5f6001600160e01b031982166380ac58cd60e01b1480610a9457506001600160e01b03198216635b5e139f60e01b145b806102b557506301ffc9a760e01b6001600160e01b03198316146102b5565b8080610ac757506001600160a01b03821615155b15610ba6575f610ad68461055e565b90506001600160a01b03831615801590610b025750826001600160a01b0316816001600160a01b031614155b8015610b3357506001600160a01b038082165f9081526005602090815260408083209387168352929052205460ff16155b15610b5c5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016103a5565b8115610ba45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610bed838383610ccd565b610428576001600160a01b038316610c1b57604051637e27328960e01b8152600481018290526024016103a5565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016103a5565b6060610c518261055e565b505f610c6760408051602081019091525f815290565b90505f815111610c855760405180602001604052805f815250610cb0565b80610c8f84610d4d565b604051602001610ca09291906112df565b6040516020818303038152906040525b9392505050565b610cc18383610dea565b6104285f8484846107cb565b5f6001600160a01b038316158015906109f45750826001600160a01b0316846001600160a01b03161480610d2557506001600160a01b038085165f9081526005602090815260408083209387168352929052205460ff165b806109f45750505f908152600460205260409020546001600160a01b03908116911614919050565b60605f610d5983610e4b565b60010190505f8167ffffffffffffffff811115610d7857610d786110a0565b6040519080825280601f01601f191660200182016040528015610da2576020820181803683370190505b5090508181016020015b5f19017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610dac57509392505050565b6001600160a01b038216610e1357604051633250574960e11b81525f60048201526024016103a5565b5f610e1f83835f6105a3565b90506001600160a01b03811615610428576040516339e3563760e11b81525f60048201526024016103a5565b5f807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e93577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610ebf576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610edd57662386f26fc10000830492506010015b6305f5e1008310610ef5576305f5e100830492506008015b6127108310610f0957612710830492506004015b60648310610f1b576064830492506002015b600a83106102b55760010192915050565b6001600160e01b031981168114610537575f80fd5b5f60208284031215610f51575f80fd5b8135610cb081610f2c565b5f5b83811015610f76578181015183820152602001610f5e565b50505f910152565b5f8151808452610f95816020860160208601610f5c565b601f01601f19169290920160200192915050565b602081525f610cb06020830184610f7e565b5f60208284031215610fcb575f80fd5b5035919050565b80356001600160a01b0381168114610fe8575f80fd5b919050565b5f8060408385031215610ffe575f80fd5b61100783610fd2565b946020939093013593505050565b5f805f60608486031215611027575f80fd5b61103084610fd2565b925061103e60208501610fd2565b9150604084013590509250925092565b5f6020828403121561105e575f80fd5b610cb082610fd2565b5f8060408385031215611078575f80fd5b61108183610fd2565b915060208301358015158114611095575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f67ffffffffffffffff808411156110ce576110ce6110a0565b604051601f8501601f19908116603f011681019082821181831017156110f6576110f66110a0565b8160405280935085815286868601111561110e575f80fd5b858560208301375f602087830101525050509392505050565b5f805f806080858703121561113a575f80fd5b61114385610fd2565b935061115160208601610fd2565b925060408501359150606085013567ffffffffffffffff811115611173575f80fd5b8501601f81018713611183575f80fd5b611192878235602084016110b4565b91505092959194509250565b5f80604083850312156111af575f80fd5b6111b883610fd2565b9150602083013567ffffffffffffffff8111156111d3575f80fd5b8301601f810185136111e3575f80fd5b6111f2858235602084016110b4565b9150509250929050565b5f806040838503121561120d575f80fd5b61121683610fd2565b915061122460208401610fd2565b90509250929050565b600181811c9082168061124157607f821691505b60208210810361125f57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f6001820161128257634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f6001600160a01b038087168352808616602084015250836040830152608060608301526112ba6080830184610f7e565b9695505050505050565b5f602082840312156112d4575f80fd5b8151610cb081610f2c565b5f83516112f0818460208801610f5c565b835190830190611304818360208801610f5c565b01949350505050565b601f821115610428575f81815260208120601f850160051c810160208610156113335750805b601f850160051c820191505b818110156113525782815560010161133f565b505050505050565b815167ffffffffffffffff811115611374576113746110a0565b61138881611382845461122d565b8461130d565b602080601f8311600181146113bb575f84156113a45750858301515b5f19600386901b1c1916600185901b178555611352565b5f85815260208120601f198616915b828110156113e9578886015182559484019460019091019084016113ca565b508582101561140657878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea164736f6c6343000814000a";

export class NFTfactory__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTfactory> {
    return super.deploy(overrides || {}) as Promise<NFTfactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NFTfactory {
    return super.attach(address) as NFTfactory;
  }
  connect(signer: Signer): NFTfactory__factory {
    return super.connect(signer) as NFTfactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTfactoryInterface {
    return new utils.Interface(_abi) as NFTfactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTfactory {
    return new Contract(address, _abi, signerOrProvider) as NFTfactory;
  }
}
